{
  "uid" : "a92be22869ada425",
  "name" : "test_division[range_left_error]",
  "fullName" : "test_pytest.test_pytest_task_two.test_task_two.TestTaskTwo#test_division",
  "historyId" : "87a2bd5ea5a5db0970643c0b67dffad4",
  "time" : {
    "start" : 1611106799690,
    "stop" : 1611106799691,
    "duration" : 1
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
  "statusTrace" : "self = <test_task_two.TestTaskTwo object at 0x0000029AE22BE3C8>, a = 4.99, b = 1, range_left = 5, range_right = 10\n\n    @allure.story(\"除法运算用例\")\n    @pytest.mark.run(order=2)\n    @pytest.mark.usefixtures(\"setup_teardown\")\n    @pytest.mark.flaky(reruns=5, reruns_delay=2)\n    @pytest.mark.parametrize(\"a,b,range_left,range_right\", get_yaml_data(key=\"division\"), ids=get_yaml_data(key=\"ids\"))\n    def test_division(self,a,b,range_left,range_right):\n        r = Calculator.division(a, b)\n        if isinstance(r, float):\n            r = round(r, 2)\n        with allure.step(\"断言\"):\n>           assert (r >= range_left and r <= range_right), \"计算结果小于区间\" if r < range_left else \"计算结果大于区间\" if r > range_left else r\nE           AssertionError: 计算结果小于区间\nE           assert (4.99 >= 5)\n\ntest_pytest\\test_pytest_task_two\\test_task_two.py:60: AssertionError",
  "flaky" : true,
  "beforeStages" : [ {
    "name" : "setup_teardown",
    "time" : {
      "start" : 1611106789520,
      "stop" : 1611106789520,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
    "statusTrace" : "self = <test_task_two.TestTaskTwo object at 0x0000029AE22BE3C8>, a = 4.99, b = 1, range_left = 5, range_right = 10\n\n    @allure.story(\"除法运算用例\")\n    @pytest.mark.run(order=2)\n    @pytest.mark.usefixtures(\"setup_teardown\")\n    @pytest.mark.flaky(reruns=5, reruns_delay=2)\n    @pytest.mark.parametrize(\"a,b,range_left,range_right\", get_yaml_data(key=\"division\"), ids=get_yaml_data(key=\"ids\"))\n    def test_division(self,a,b,range_left,range_right):\n        r = Calculator.division(a, b)\n        if isinstance(r, float):\n            r = round(r, 2)\n        with allure.step(\"断言\"):\n>           assert (r >= range_left and r <= range_right), \"计算结果小于区间\" if r < range_left else \"计算结果大于区间\" if r > range_left else r\nE           AssertionError: 计算结果小于区间\nE           assert (4.99 >= 5)\n\ntest_pytest\\test_pytest_task_two\\test_task_two.py:60: AssertionError",
    "steps" : [ {
      "name" : "断言",
      "time" : {
        "start" : 1611106799690,
        "stop" : 1611106799691,
        "duration" : 1
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)\n",
      "statusTrace" : "  File \"C:\\Users\\余伟豪\\Desktop\\PythonDemo\\test_pytest\\test_pytest_task_two\\test_task_two.py\", line 60, in test_division\n    assert (r >= range_left and r <= range_right), \"计算结果小于区间\" if r < range_left else \"计算结果大于区间\" if r > range_left else r\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  },
  "afterStages" : [ {
    "name" : "setup_teardown::0",
    "time" : {
      "start" : 1611106819957,
      "stop" : 1611106819957,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "除法运算用例"
  }, {
    "name" : "feature",
    "value" : "作业二"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('setup_teardown')"
  }, {
    "name" : "tag",
    "value" : "flaky(reruns=5, reruns_delay=2)"
  }, {
    "name" : "tag",
    "value" : "run(order=2)"
  }, {
    "name" : "parentSuite",
    "value" : "test_pytest.test_pytest_task_two"
  }, {
    "name" : "suite",
    "value" : "test_task_two"
  }, {
    "name" : "subSuite",
    "value" : "TestTaskTwo"
  }, {
    "name" : "host",
    "value" : "DESKTOP-939OH2V"
  }, {
    "name" : "thread",
    "value" : "6820-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_pytest.test_pytest_task_two.test_task_two"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "a",
    "value" : "4.99"
  }, {
    "name" : "b",
    "value" : "1"
  }, {
    "name" : "range_left",
    "value" : "5"
  }, {
    "name" : "range_right",
    "value" : "10"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "36fec8a2c24fb59b",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106797671,
        "stop" : 1611106797671,
        "duration" : 0
      }
    }, {
      "uid" : "78be0a31e9ce4740",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106795658,
        "stop" : 1611106795658,
        "duration" : 0
      }
    }, {
      "uid" : "5a01838573c56d25",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106793637,
        "stop" : 1611106793639,
        "duration" : 2
      }
    }, {
      "uid" : "1575ac8fda01b767",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106791623,
        "stop" : 1611106791623,
        "duration" : 0
      }
    }, {
      "uid" : "6438006a68e7f412",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106789605,
        "stop" : 1611106789606,
        "duration" : 1
      }
    }, {
      "uid" : "4acf4ead679eccd9",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106721305,
        "stop" : 1611106721305,
        "duration" : 0
      }
    }, {
      "uid" : "607cbdf17343c189",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106719297,
        "stop" : 1611106719297,
        "duration" : 0
      }
    }, {
      "uid" : "f5547b7b25e1cd8e",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106717277,
        "stop" : 1611106717278,
        "duration" : 1
      }
    }, {
      "uid" : "20ee007f20422606",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106715268,
        "stop" : 1611106715268,
        "duration" : 0
      }
    }, {
      "uid" : "c58420fac2a2db11",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106713248,
        "stop" : 1611106713249,
        "duration" : 1
      }
    }, {
      "uid" : "bcac5301e310964d",
      "status" : "failed",
      "statusDetails" : "AssertionError: 计算结果小于区间\nassert (4.99 >= 5)",
      "time" : {
        "start" : 1611106711240,
        "stop" : 1611106711240,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=2)", "flaky(reruns=5, reruns_delay=2)", "@pytest.mark.usefixtures('setup_teardown')" ]
  },
  "source" : "a92be22869ada425.json",
  "parameterValues" : [ "4.99", "1", "5", "10" ]
}